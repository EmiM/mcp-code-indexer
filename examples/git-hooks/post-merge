#!/bin/bash
set -eo pipefail

# MCP Code Indexer - Post-Merge Hook
# 
# This hook processes commits added during a merge operation.
# It identifies new commits from the merge and processes each one
# individually to avoid token limits.
#
# Installation:
#   cp examples/post-merge-hook .git/hooks/post-merge
#   chmod +x .git/hooks/post-merge
#
# Requirements:
#   - mcp-code-indexer installed and in PATH
#   - OPENROUTER_API_KEY environment variable set

cd "$(git rev-parse --show-toplevel)"

echo "Post-merge hook: Processing merged commits..." >&2

# Get the commit before the merge (HEAD~1 is the first parent)
merge_base=$(git rev-parse HEAD~1)
current_head=$(git rev-parse HEAD)

# Get all commits that were merged (excluding the merge commit itself)
# This gets commits between the merge base and the second parent of the merge
if git rev-parse HEAD~2 >/dev/null 2>&1; then
  # This is a merge commit with multiple parents
  second_parent=$(git rev-parse HEAD~2)
  
  # Get commits that are in the merged branch but not in the main branch
  merged_commits=$(git rev-list --reverse "$merge_base..$second_parent" 2>/dev/null || echo "")
else
  # Fast-forward merge or single commit
  merged_commits=$(git rev-list --reverse "$merge_base..$current_head" 2>/dev/null || echo "")
fi

# Collect commits to process
commits=()
if [ -n "$merged_commits" ]; then
  while IFS= read -r commit_sha; do
    [ -z "$commit_sha" ] && continue
    echo "  Found merged commit: $commit_sha" >&2
    commits+=("$commit_sha")
  done <<< "$merged_commits"
fi

# Process commits sequentially in the background
if [ ${#commits[@]} -gt 0 ]; then
  echo "Post-merge hook: Starting background analysis for ${#commits[@]} merged commits..." >&2
  
  # Run sequential processing in background
  {
    for commit_sha in "${commits[@]}"; do
      echo "  Processing commit: $commit_sha" >&2
      mcp-code-indexer --githook "$commit_sha" 2>&1
    done
    echo "Post-merge hook: Completed analysis of ${#commits[@]} commits" >&2
  } >> ~/.mcp-code-index/githook.log 2>&1 &
  
  disown
  
  echo "Post-merge hook: Background analysis started. Check ~/.mcp-code-index/githook.log for progress." >&2
else
  echo "Post-merge hook: No new commits to process from merge." >&2
fi

exit 0
