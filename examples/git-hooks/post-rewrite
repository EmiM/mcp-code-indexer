#!/bin/bash
set -eo pipefail

# MCP Code Indexer - Post-Rewrite Hook
#
# This hook processes rewritten commits after git rebase, amend, or other
# commit-rewriting operations. It reads the list of old/new commit pairs
# from stdin and processes each commit individually to avoid token limits.
#
# Installation:
#   cp examples/post-rewrite-hook .git/hooks/post-rewrite
#   chmod +x .git/hooks/post-rewrite
#
# Requirements:
#   - mcp-code-indexer installed and in PATH
#   - OPENROUTER_API_KEY environment variable set

cd "$(git rev-parse --show-toplevel)"

echo "Post-rewrite hook: Processing rewritten commits..." >&2

# Collect commits to process
commits=()
while read -r old_sha new_sha; do
  # Skip invalid lines (e.g., comments)
  [[ "$old_sha" =~ ^# ]] && continue

  echo "  Found rewritten commit: $old_sha -> $new_sha" >&2
  commits+=("$new_sha")
done < "$1"

# Process commits sequentially in the background
if [ ${#commits[@]} -gt 0 ]; then
  echo "Post-rewrite hook: Starting background analysis for ${#commits[@]} commits..." >&2

  # Run sequential processing in background
  {
    for commit_sha in "${commits[@]}"; do
      echo "  Processing commit: $commit_sha" >&2
      mcp-code-indexer --githook "$commit_sha" 2>&1
    done
    echo "Post-rewrite hook: Completed analysis of ${#commits[@]} commits" >&2
  } >> ~/.mcp-code-index/githook.log 2>&1 &

  disown

  echo "Post-rewrite hook: Background analysis started. Check ~/.mcp-code-index/githook.log for progress." >&2
else
  echo "Post-rewrite hook: No commits to process." >&2
fi

exit 0
